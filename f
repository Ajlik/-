Конечно! Давайте рассмотрим подробнее создание и удаление строки из двумерного массива.

Создание двумерного массива:
cpp
Copy code
int rows = 3;
int cols = 4;

// Создание двумерного массива
int** array = new int*[rows];
for (int i = 0; i < rows; ++i) {
    array[i] = new int[cols];
}
В данном примере создается двумерный массив с размерами 3 строки и 4 столбца. Переменная array является указателем на указатель целых чисел. Сначала создается массив указателей на int, а затем для каждого указателя выделяется память под массив целых чисел.

Заполнение массива значениями:
cpp
Copy code
for (int i = 0; i < rows; ++i) {
    for (int j = 0; j < cols; ++j) {
        array[i][j] = i * cols + j;
    }
}
Данный цикл заполняет массив значениями. В данном случае, каждый элемент массива заполняется числом, которое вычисляется на основе индексов строки и столбца.

Добавление новой строки в массив:
cpp
Copy code
int newRows = rows + 1;
int** newArray = new int*[newRows];
for (int i = 0; i < newRows; ++i) {
    if (i < rows) {
        newArray[i] = array[i];
    } else {
        newArray[i] = new int[cols];
        // Инициализация новой строки
        for (int j = 0; j < cols; ++j) {
            newArray[i][j] = i * cols + j;
        }
    }
}
Для добавления новой строки в массив, создается новый двумерный массив newArray с размером newRows, где newRows равно rows + 1. Затем, с помощью цикла, копируются существующие строки из array в newArray. Новая строка инициализируется с помощью цикла, аналогично заполнению массива значениями.

Удаление строки из массива:
cpp
Copy code
int rowIndex = 1; // Индекс удаляемой строки
newRows = rows - 1;
int** updatedArray = new int*[newRows];
int k = 0;
for (int i = 0; i < rows; ++i) {
    if (i != rowIndex) {
        updatedArray[k] = newArray[i];
        ++k;
    } else {
        delete[] newArray[i]; // Освобождение памяти удаленной строки
    }
}
Для удаления строки из массива, создается новый двумерный массив updatedArray с размером newRows, где newRows равно rows - 1. Используется переменная rowIndex для указания индекса удаляемой строки. Цикл копирует строки из newArray в updatedArray, пропуская строку с индексом rowIndex. Удаленная строка освобождается с помощью оператора delete[], чтобы освободить выделенную для нее память.

Освобождение памяти:
cpp
Copy code
for (int i = 0; i < rows; ++i) {
    delete[] array[i];
}
delete[] array;
Не забудьте освободить память после использования двумерного массива. Сначала удаляются все строки массива, а затем освобождается сам массив.

Важно помнить, что при использовании динамического выделения памяти, необходимо также учитывать освобождение памяти для предотвращения утечек памяти.




